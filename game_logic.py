import random
from typing import Tuple
from config import MIN_SIZE, MAX_SIZE, MIN_CHANGE, MAX_CHANGE, POSITIVE_PROBABILITY

class GameLogic:
    @staticmethod
    def calculate_size_change() -> int:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–¥–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç MIN_CHANGE –¥–æ MAX_CHANGE, –∏—Å–∫–ª—é—á–∞—è 0
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏—Å–∫–ª—é—á–∞—è 0
        negatives = [v for v in range(MIN_CHANGE, 0)]
        positives = [v for v in range(1, MAX_CHANGE + 1)]

        # –í—ã–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ POSITIVE_PROBABILITY
        if random.random() < POSITIVE_PROBABILITY:
            return random.choice(positives)
        else:
            return random.choice(negatives)
    
    @staticmethod
    def apply_size_change(current_size: int, change: int) -> Tuple[int, int]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–º–µ—Ä—É –≥—Ä—É–¥–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–≤—ã–π_—Ä–∞–∑–º–µ—Ä, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        """
        new_size = current_size + change
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if new_size < MIN_SIZE:
            actual_change = MIN_SIZE - current_size
            new_size = MIN_SIZE
        elif new_size > MAX_SIZE:
            actual_change = MAX_SIZE - current_size
            new_size = MAX_SIZE
        else:
            actual_change = change
        
        return new_size, actual_change
    
    @staticmethod
    def get_size_description(size: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–¥–∏
        """
        if size <= -80:
            return "–ø–ª–æ—Å–∫–∞—è –∫–∞–∫ –¥–æ—Å–∫–∞"
        elif size <= -60:
            return "–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è"
        elif size <= -40:
            return "–º–∞–ª–µ–Ω—å–∫–∞—è"
        elif size <= -20:
            return "–Ω–µ–±–æ–ª—å—à–∞—è"
        elif size <= 0:
            return "—Å—Ä–µ–¥–Ω—è—è"
        elif size <= 20:
            return "—Ö–æ—Ä–æ—à–∞—è"
        elif size <= 40:
            return "–±–æ–ª—å—à–∞—è"
        elif size <= 60:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è"
        elif size <= 80:
            return "–æ–≥—Ä–æ–º–Ω–∞—è"
        else:
            return "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–≥—Ä–æ–º–Ω–∞—è"
    
    @staticmethod
    def get_change_description(change: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        """
        if change > 0:
            if change >= 8:
                return f"–≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {change} —Ä–∞–∑–º–µ—Ä–æ–≤! üéâ"
            elif change >= 5:
                return f"–≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {change} —Ä–∞–∑–º–µ—Ä–æ–≤! üòä"
            elif change >= 2:
                return f"–≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {change} —Ä–∞–∑–º–µ—Ä–∞ üôÇ"
            else:
                return f"–≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {change} —Ä–∞–∑–º–µ—Ä üòå"
        else:
            change_abs = abs(change)
            if change_abs >= 8:
                return f"—É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {change_abs} —Ä–∞–∑–º–µ—Ä–æ–≤! üò±"
            elif change_abs >= 5:
                return f"—É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {change_abs} —Ä–∞–∑–º–µ—Ä–æ–≤! üò¢"
            elif change_abs >= 2:
                return f"—É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {change_abs} —Ä–∞–∑–º–µ—Ä–∞ üòï"
            else:
                return f"—É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {change_abs} —Ä–∞–∑–º–µ—Ä üòî"
    
    @staticmethod
    def get_emoji_for_size(size: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–¥–∏
        """
        if size <= -60:
            return "ü´§"
        elif size <= -20:
            return "üòê"
        elif size <= 20:
            return "üòä"
        elif size <= 60:
            return "üòç"
        else:
            return "ü§©"
    
    @staticmethod
    def get_emoji_for_change(change: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        """
        if change > 0:
            if change >= 8:
                return "üéâ"
            elif change >= 5:
                return "üòä"
            elif change >= 2:
                return "üôÇ"
            else:
                return "üòå"
        else:
            change_abs = abs(change)
            if change_abs >= 8:
                return "üò±"
            elif change_abs >= 5:
                return "üò¢"
            elif change_abs >= 2:
                return "üòï"
            else:
                return "üòî"
