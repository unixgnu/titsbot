import logging
import math
from telegram import Update
from telegram.ext import ContextTypes
from database import Database
from game_logic import GameLogic
from config import ENFORCE_COOLDOWN, COOLDOWN_SECONDS, ADMIN_USER_IDS
from datetime import datetime, timezone


def _parse_sqlite_timestamp(timestamp_str: str) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç TIMESTAMP –∏–∑ SQLite –≤ timezone-aware UTC datetime."""
    # SQLite CURRENT_TIMESTAMP —Ö—Ä–∞–Ω–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM:SS' –≤ UTC
    try:
        dt = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
        return dt.replace(tzinfo=timezone.utc)
    except ValueError:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º ISO-—Ñ–æ—Ä–º–∞—Ç—ã
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ 'Z' ‚Üí '+00:00'
            normalized = timestamp_str.replace("Z", "+00:00")
            dt2 = datetime.fromisoformat(normalized)
            if dt2.tzinfo is None:
                dt2 = dt2.replace(tzinfo=timezone.utc)
            return dt2.astimezone(timezone.utc)
        except Exception as _:
            # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ ‚Äî –ø—Ä–æ–±—Ä–æ—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise


def _format_remaining(seconds_total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ 'H:MM' –±–µ–∑ —Å–µ–∫—É–Ω–¥, –º–∏–Ω—É—Ç—ã –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è –≤–≤–µ—Ä—Ö."""
    if seconds_total < 0:
        seconds_total = 0
    hours = seconds_total // 3600
    leftover = seconds_total % 3600
    # –û–∫—Ä—É–≥–ª—è–µ–º –º–∏–Ω—É—Ç—ã –≤–≤–µ—Ä—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã
    minutes = math.ceil(leftover / 60) if leftover else 0
    if minutes == 60:
        hours += 1
        minutes = 0
    return f"{hours}:{minutes:02d}"

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, db: Database):
        self.db = db
        self.game_logic = GameLogic()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç –≤ –±–∞–∑–µ
        user_data = self.db.get_or_create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        self.db.get_or_create_chat(
            chat_id=chat.id,
            chat_type=chat.type,
            title=chat.title
        )
        
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {user_data['breast_size']} ("
            f"{self.game_logic.get_size_description(user_data['breast_size'])})\n"
            f"–ö–æ–º–∞–Ω–¥—ã: /tits /stats /top /history /help"
        )
        
        await update.message.reply_text(welcome_message)
    
    async def tits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tits"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_or_create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
        self.db.get_or_create_chat(
            chat_id=chat.id,
            chat_type=chat.type,
            title=chat.title
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if ENFORCE_COOLDOWN:
            last_used_str = self.db.get_last_tits_usage(user.id)
            if last_used_str:
                try:
                    # TIMESTAMP –≤ –ë–î —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ UTC
                    last_used_dt = _parse_sqlite_timestamp(last_used_str)
                    now_dt = datetime.now(timezone.utc)
                    elapsed_seconds = (now_dt - last_used_dt).total_seconds()
                    if elapsed_seconds < COOLDOWN_SECONDS:
                        remaining = int(COOLDOWN_SECONDS - elapsed_seconds)
                        await update.message.reply_text(
                            f"–ï—â—ë —Ä–∞–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {_format_remaining(remaining)} (–∫–¥ {COOLDOWN_SECONDS // 3600} —á)"
                        )
                        return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /tits: {e}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        change = self.game_logic.calculate_size_change()
        new_size, actual_change = self.game_logic.apply_size_change(
            user_data['breast_size'], change
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –±–∞–∑–µ
        self.db.update_breast_size(user.id, new_size, actual_change, chat.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = user.first_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
        
        # –†–æ—Ñ–µ–ª—å–Ω—ã–π, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏
        verb = "–ø—Ä–∏–±–∞–≤–∏–ª–∞" if actual_change > 0 else "—É–±–∞–≤–∏–ª–∞"
        delta_word = "—Ä–∞–∑–º–µ—Ä–æ–≤" if abs(actual_change) != 1 else "—Ä–∞–∑–º–µ—Ä"
        rank = self.db.get_user_rank(user.id)
        rank_line = f"–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {rank}" if rank else "–í —Ç–æ–ø –ø–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–ª"
        message = (
            f"{user_name}, —Ç–≤–æ—è –≥—Ä—É–¥—å {verb} –Ω–∞ {abs(actual_change)} {delta_word}\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_size}\n"
            f"{rank_line}"
        )
        
        await update.message.reply_text(message)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = self.db.get_user_stats(user.id)
        
        if not stats:
            await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /tits —Å–Ω–∞—á–∞–ª–∞!")
            return
        
        user_name = user.first_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
        
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_name}:\n\n"
            f"üçí –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['breast_size']} "
            f"({self.game_logic.get_size_description(stats['breast_size'])}) "
            f"{self.game_logic.get_emoji_for_size(stats['breast_size'])}\n\n"
            f"üìà –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats['total_changes']}\n"
            f"üìÖ –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['first_change'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['last_change'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
        
        await update.message.reply_text(message)
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = self.db.get_top_users(10)
        
        if not top_users:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø-–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /tits!")
            return
        
        message = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –≥—Ä—É–¥–∏:\n\n"
        
        for i, user in enumerate(top_users, 1):
            user_name = user['first_name'] or user['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
            size_desc = self.game_logic.get_size_description(user['breast_size'])
            emoji = self.game_logic.get_emoji_for_size(user['breast_size'])
            
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            else:
                medal = f"{i}."
            
            message += f"{medal} {user_name}: {user['breast_size']} ({size_desc}) {emoji}\n"
        
        await update.message.reply_text(message)
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        history = self.db.get_user_history(user.id, 5)
        
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /tits —Å–Ω–∞—á–∞–ª–∞!")
            return
        
        user_name = user.first_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
        
        message = f"üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π {user_name}:\n\n"
        
        for i, record in enumerate(history, 1):
            change_desc = self.game_logic.get_change_description(record['change_amount'])
            emoji = self.game_logic.get_emoji_for_change(record['change_amount'])
            chat_title = record['chat_title'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
            
            message += (
                f"{i}. {emoji} {change_desc}\n"
                f"   –ë—ã–ª–æ: {record['old_size']} ‚Üí –°—Ç–∞–ª–æ: {record['new_size']}\n"
                f"   –ß–∞—Ç: {chat_title}\n"
                f"   –î–∞—Ç–∞: {record['created_at']}\n\n"
            )
        
        await update.message.reply_text(message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "–ö–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n"
            "/tits ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä (‚àí10‚Ä¶+10)\n"
            "/stats ‚Äî —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä\n"
            "/top ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        
        await update.message.reply_text(help_message)
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )

    async def reset_all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        user = update.effective_user
        if user.id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        try:
            self.db.reset_all_stats()
            await update.message.reply_text("‚úÖ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
